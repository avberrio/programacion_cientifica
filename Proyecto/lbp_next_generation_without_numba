Timer unit: 1e-06 s

Total time: 239.202 s
File: <ipython-input-76-09cf13080a15>
Function: next_generation_without_numba at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def next_generation_without_numba(sample, generations=1):
     2         1            3      3.0      0.0      historic_record = list()
     3         1            1      1.0      0.0      historic_record.append(sample)
     4         1            0      0.0      0.0      if generations == 0:
     5                                                   return historic_record
     6         1         5532   5532.0      0.0      today = np.copy(sample)
     7        11           29      2.6      0.0      for generation in range(generations):
     8        10        22492   2249.2      0.0          next_g = np.zeros(sample.shape)
     9     10010         6708      0.7      0.0          for i in range(sample.shape[0]):
    10     10000         7925      0.8      0.0              upper_bound = i - 1
    11     10000         6864      0.7      0.0              lower_bound = i + 2
    12     10000         6514      0.7      0.0              if upper_bound < 0:
    13        10            9      0.9      0.0                  upper_bound = 0
    14     10000        10916      1.1      0.0              if lower_bound > sample.shape[0]:
    15        10            8      0.8      0.0                  lower_bound = sample.shape[0]
    16  10010000      7046501      0.7      2.9              for j in range(sample.shape[1]):
    17  10000000      7265696      0.7      3.0                  left_bound = j - 1
    18  10000000      7274225      0.7      3.0                  right_bound = j + 2
    19  10000000      7041571      0.7      2.9                  if left_bound < 0:
    20     10000         6167      0.6      0.0                      left_bound = 0
    21  10000000     10179878      1.0      4.3                  if right_bound > sample.shape[1]:
    22     10000         8199      0.8      0.0                      right_bound = sample.shape[1]
    23                                                               
    24                                                           # Obtenemos la cantidad de células vivas alrededor de la de interés
    25  10000000    145877169     14.6     61.0                  live = np.sum(today[upper_bound:lower_bound, left_bound:right_bound] - today[i, j])
    26                                                           
    27                                                           # Importante destacar que restamos today[i, j] porque de lo contrario estaríamos incluyendo a esta
    28                                                           # célula.
    29                                                           
    30  10000000     17046164      1.7      7.1                  if today[i, j] == 1 and live > 3:
    31                                                               next_g[i, j] = 0
    32  10000000     11830723      1.2      4.9                  elif today[i, j] == 1 and (live == 2 or live == 3):
    33                                                               next_g[i, j] = 1
    34  10000000     11510923      1.2      4.8                  elif today[i, j] == 1 and live < 2:
    35    674417       738532      1.1      0.3                      next_g[i, j] = 0
    36   9325583     13011606      1.4      5.4                  elif today[i, j] == 0 and live == 3:
    37    174341       214474      1.2      0.1                      next_g[i, j] = 1
    38        10        82905   8290.5      0.0          today = np.copy(next_g)
    39        10           74      7.4      0.0          historic_record.append(next_g)
    40         1            1      1.0      0.0      return historic_record